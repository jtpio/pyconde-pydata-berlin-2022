"use strict";(self.webpackChunkjupyterlab_filesystem_access=self.webpackChunkjupyterlab_filesystem_access||[]).push([[611],{611:(e,t,i)=>{i.r(t),i.d(t,{default:()=>m});var o=i(114),n=i(146),a=i(276),r=i(881),s=i(50),l=i(785),c=i(168);class d{constructor(){this._isDisposed=!1,this._fileChanged=new c.Signal(this),this._rootHandle=null}get isDisposed(){return this._isDisposed}dispose(){this.isDisposed||(this._isDisposed=!0,c.Signal.clearData(this))}get name(){return"FileSystem"}get serverSettings(){return s.ServerConnection.makeSettings()}get fileChanged(){return this._fileChanged}get rootHandle(){return this._rootHandle}set rootHandle(e){this._rootHandle=e}async get(e,t){const i=this._rootHandle;if(!i)return{name:"",path:"",created:(new Date).toISOString(),last_modified:(new Date).toISOString(),format:"json",content:null,writable:!0,type:"directory",mimetype:"application/json"};let o=i;for(const t of e.split("/").slice(0,-1))o=await o.getDirectoryHandle(t);const n=l.PathExt.dirname(e),a=l.PathExt.basename(e);let r;const s=await async function(e){const t=[];for await(const i of e)t.push(i);return t}(o.values());if(r=a?s.filter((e=>e.name===a))[0]:o,"file"===r.kind){const e=await r.getFile();return{name:e.name,path:l.PathExt.join(n,a),created:new Date(e.lastModified).toISOString(),last_modified:new Date(e.lastModified).toISOString(),format:"text",content:await e.text(),writable:!0,type:"file",mimetype:"text/plain"}}{const e=[];for await(const t of r.values())if("file"===t.kind){const i=await t.getFile();e.push({name:i.name,path:l.PathExt.join(n,a,i.name),created:new Date(i.lastModified).toISOString(),last_modified:new Date(i.lastModified).toISOString(),format:"text",content:await i.text(),writable:!0,type:"file",mimetype:"text/plain"})}else e.push({name:t.name,path:l.PathExt.join(n,a,t.name),created:"",last_modified:"",format:"json",content:null,writable:!0,type:"directory",mimetype:"application/json"});return{name:l.PathExt.basename(n),path:l.PathExt.join(n,a),last_modified:"",created:"",format:"json",mimetype:"application/json",content:e,size:void 0,writable:!0,type:"directory"}}}getDownloadUrl(e){throw new Error("Method not implemented.")}newUntitled(e){throw new Error("Method not implemented.")}delete(e){throw new Error("Method not implemented.")}rename(e,t){throw new Error("Method not implemented.")}async save(e,t){const i=this._rootHandle;if(!i)throw new Error("No root file handle");let o=i;for(const t of e.split("/").slice(0,-1))o=await o.getDirectoryHandle(t);const n=await o.getFileHandle(l.PathExt.basename(e)),a=await n.createWritable({}),r=t?.format,s=t?.content;if("json"===r){const e=JSON.stringify(s,null,2);await a.write(e)}else await a.write(s);return await a.close(),this.get(e)}copy(e,t){throw new Error("Method not implemented.")}async createCheckpoint(e){return{id:"test",last_modified:(new Date).toISOString()}}async listCheckpoints(e){return[{id:"test",last_modified:(new Date).toISOString()}]}restoreCheckpoint(e,t){return Promise.resolve(void 0)}deleteCheckpoint(e,t){return Promise.resolve(void 0)}}const m={id:"jupyterlab-filesystem-access:plugin",requires:[n.IFileBrowserFactory,a.ITranslator],autoStart:!0,activate:(e,t,i)=>{if(!window.showDirectoryPicker)return void console.warn("The File System Access API is not supported in this browser.");const{serviceManager:n}=e,{createFileBrowser:a}=t,s=i.load("jupyterlab-filesystem-access"),l=new d;n.contents.addDrive(l);const c=a("jp-filesystem-browser",{driveName:l.name,restore:!1});c.title.caption=s.__("Local File System"),c.title.icon=r.listIcon;const m=new o.ToolbarButton({icon:r.folderIcon,onClick:async()=>{const e=await window.showDirectoryPicker();e&&(l.rootHandle=e,c.model.cd("/"))},tooltip:s.__("Open a new folder")});c.toolbar.insertItem(0,"open-directory",m),e.shell.add(c,"left")}}}}]);